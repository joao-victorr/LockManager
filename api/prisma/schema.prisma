generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model usersWeb {
  id       String @id @default(cuid())
  name     String
  email    String @unique
  password String

  @@map("usersWeb")
}

model devices {
  id               String             @id @default(cuid())
  name             String
  ip               String             @unique
  user             String
  password         String
  status           Boolean            @default(true)
  usersDevices     usersDevices[]
  groupsDevices    groupsDevices[]
  timeZonesDevices timeZonesDevices[]
  timeSpansDevices timeSpansDevices[]
  accessRules      accessRules[]
  usersGroups      usersGroups[]

  @@map("devices")
}

model users {
  id           Int            @id @default(autoincrement())
  name         String
  image        String?
  beginTime    Int?
  endTime      Int?
  usersDevices usersDevices[]
  usersGroups  usersGroups[]

  @@map("users")
}

model usersGroups {
  id        Int     @id @default(autoincrement())
  idDevices String
  devices   devices @relation(fields: [idDevices], references: [id])
  idUsers   Int
  users     users   @relation(fields: [idUsers], references: [id])
  idGroups  Int
  groups    groups  @relation(fields: [idGroups], references: [id])

  @@map("usersGroups")
}

model groups {
  id            Int             @id @default(autoincrement())
  name          String
  groupsDevices groupsDevices[]
  accessRules   accessRules[]
  usersGroups   usersGroups[]

  @@map("groups")
}

model usersDevices {
  id        Int     @id @default(autoincrement())
  code      Int
  idDevices String
  devices   devices @relation(fields: [idDevices], references: [id])
  idUsers   Int
  users     users   @relation(fields: [idUsers], references: [id])

  @@map("usersDevices")
}

model groupsDevices {
  id        Int     @id @default(autoincrement())
  code      Int
  idDevices String
  devices   devices @relation(fields: [idDevices], references: [id])
  idGroups  Int
  groups    groups  @relation(fields: [idGroups], references: [id])

  @@map("groupsDevices")
}

model timeZones {
  id               Int                @id @default(autoincrement())
  name             String
  timeSpans        timeSpans[]
  timeZonesDevices timeZonesDevices[]
  accessRules      accessRules[]

  @@map("timeZones")
}

model timeZonesDevices {
  id          Int       @id @default(autoincrement())
  code        Int
  idDevices   String
  devices     devices   @relation(fields: [idDevices], references: [id])
  idTimeZones Int
  timeZones   timeZones @relation(fields: [idTimeZones], references: [id])

  @@map("timeZonesDevices")
}

model timeSpans {
  id               Int                @id @default(autoincrement())
  start            Int
  end              Int
  sun              Int
  mon              Int
  tue              Int
  wed              Int
  thu              Int
  fri              Int
  sat              Int
  hol1             Int
  hol2             Int
  hol3             Int
  timeZonesId      Int
  timeZones        timeZones          @relation(fields: [timeZonesId], references: [id])
  timeSpansDevices timeSpansDevices[]

  @@map("timeSpans")
}

model timeSpansDevices {
  id          Int       @id @default(autoincrement())
  code        Int
  idDevices   String
  devices     devices   @relation(fields: [idDevices], references: [id])
  idTimeSpans Int
  timeSpans   timeSpans @relation(fields: [idTimeSpans], references: [id])

  @@map("timeSpansDevices")
}

model accessRules {
  id          Int       @id @default(autoincrement())
  code        Int
  idDevices   String
  devices     devices   @relation(fields: [idDevices], references: [id])
  idTimeZones Int
  timeZones   timeZones @relation(fields: [idTimeZones], references: [id])
  idGroups    Int
  groups      groups    @relation(fields: [idGroups], references: [id])

  @@map("accessRules")
}
